Running Flume on HBase
----------------------

1) Compile top-level flume
   $ ant

2) Copy your version of hbase-*.jar into the plugins/hbasesink/lib

3) Compile hbase-sink from this directory
   $ ant

4) Successful compilation will produce "hbase_sink.jar"

5) Add the plugin classes in flume/conf/flume-site.xml
<configuration>
  <property>
    <name>flume.plugin.classes</name>
    <value>com.cloudera.flume.hbase.Attr2HBaseEventSink</value>
    <description>Comma separated list of plugin classes</description>
  </property>
</configuration>


6) Include the jars in the "FLUME_CLASSPATH"
From the terminal where you would start the Flume nodes:
  $ export FLUME_CLASSPATH=/your_path/flume/plugins/hbasesink/hbase_sink.jar:/your_path/hbase-*/conf/
  Include all the jars that your plugin refers to

Here's how I've run flume against hbase in dev mode:

7) From your hbase-*, "bin/start-hbase.sh"

Note that starting hbase will also start ZooKeeper

8) using the hbase shell create a table for the flume sink to write events

$ bin/hbase shell
> create 't1', 'f1'

9) Undertand the attr2hbase sink usage:
/**
 *
 * Sink has the next parameters: attr2hbase("table" [,"family"[, "writeBody"[,"attrPrefix"[,"writeBufferSize"[,"writeToWal"]]]]]).
 * "table"           - HBase table name to perform output into.
 * "sysFamily"       - Column family's name which is used to store "system" data (event's timestamp, host, priority).
 *                     In case this param is absent or ="" the sink doesn't write "system" data.
 * "writeBody"       - Indicates whether event's body should be written among other "system" data.
 *                     Default is "true" which means it should be written.
 *                     In case this param is absent or ="" the sink doesn't write "system" data.
 * "attrPrefix"      - Attributes with this prefix in key will be placed into HBase table. Default value: "2hb_".
 *                     Attribute key should be in the following format: "&lt;attrPrefix&gt;&lt;columnFamily&gt;:&lt;qualifier&gt;",
 *                     e.g. "2hb_user:name" means that its value will be placed into "user" column family with "name" qualifier.
 *                     Attribute with key "&lt;attrPrefix&gt;" SHOULD contain row key for Put,
 *                     otherwise (if no row can be extracted) the event is skipped and no records are written to the HBase table.
 *                     Next table shows what gets written into HBase table depending on the attribute name and other settings (in format columnFamily:qualifier->value, "-" means nothing is written).
 * <blockquote><table border=1>
 *   <tr>
 *     <th>Event's attr ("name"->"value")</th>
 *     <th>attrPrefix="2hb_", sysFamily=null</th>
 *     <th>attrPrefix="2hb_", sysFamily="sysfam"</th>
 *     <th>attrPrefix="", sysFamily="sysfam"</th>
 *     <th>attrPrefix="", sysFamily=null</th>
 *   </tr>
 *   <tr>
 *     <td>"any"->"foo"</td>
 *     <td>-</td>
 *     <td>-</td>
 *     <td>sysfam:any->foo</td>
 *     <td>-</td>
 *   </tr>
 *   <tr>
 *     <td>"colfam:col"->"foo"</td>
 *     <td>-</td>
 *     <td>-</td>
 *     <td>colfam:col->foo</td>
 *     <td>colfam:col->foo</td>
 *   </tr>
 *   <tr>
 *     <td>"2hb_any"->"foo"</td>
 *     <td>-</td>
 *     <td>sysfam:any->foo</td>
 *     <td>sysfam:2hb_any->foo</td>
 *     <td>-</td>
 *   </tr>
 *   <tr>
 *     <td>"2hb_colfam:col"->"foo"</td>
 *     <td>colfam:col->foo</td>
 *     <td>colfam:col->foo</td>
 *     <td>2hb_colfam:col->foo</td>
 *     <td>2hb_colfam:col->foo</td>
 *   </tr>
 * </table></blockquote>
 *
 * "writeBufferSize" - If provided, autoFlush for the HTable set to "false", and writeBufferSize is set to its value.
 *                     If not provided, by default autoFlush is set to "true" (default HTable setting).
 *                     This setting is valuable to boost HBase write speed.
 * "writeToWal"      - Determines whether WAL should be used during writing to HBase. If not provided Puts are written to WAL by default
 *                     This setting is valuable to boost HBase write speed, but decreases reliability level. Use it if you know what it does.
 *
 * The Sink also implements method getSinkBuilders(), so it can be used as Flume's extension plugin (see flume.plugin.classes property of flume-site.xml config details)
   "usage: attr2hbase(\"table\" [,\"sysFamily\"[, \"writeBody\"[,\"attrPrefix\"[,\"writeBufferSize\"[,\"writeToWal\"]]]]])

10) start flume, I started a node with a console source and attr2hbase sink
$ FLUME_DEVMODE=true bin/flume master_nowatch
$ FLUME_DEVMODE=true bin/flume shell
> connect localhost
> exec config hbase_sink_node 'console' 'attr2hbase("t1","f1","true","attr-prefix","10","false")'
> quit

$ FLUME_DEVMODE=true bin/flume node_nowatch -n hbase_sink_node

11) enter some events on hbase_sink_node (type some text followed by return)

12) again using the hbase shell scan the output table for your rows

> scan 't1'

example output: (I typed "hello" on hbase_sink_node console input)

hbase(main):002:0> scan 't1'
ROW                          COLUMN+CELL
 \x00\x00\xF6_\x0Fk\xF4\x80  column=f1:event, timestamp=1274227444388, value=hello
 \x00\x00\xF6_\x0Fk\xF4\x80  column=f1:host, timestamp=1274227444388, value=valhalla
 \x00\x00\xF6_\x0Fk\xF4\x80  column=f1:timestamp, timestamp=1274227444388, value=\x00\x00\x01\x28\xAD\xDF\xCA\
                             x7C
1 row(s) in 0.0550 seconds
