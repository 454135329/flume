#!/usr/bin/env /bin/bash
# Licensed to Cloudera, Inc. under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  Cloudera, Inc. licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.



##
# This script runs core flume commands.  It sets up the proper jar
# library paths and defaults to a java class name.
#
# TODO (jon) This assumes CLASSPATH has $JAVA_HOME/lib/tools.jar in it
# (jetty requires this to compile jsps.  In future will precompile
# jsps to make this requirement go away.)

function usage {
  echo "usage: flume command [args...]"
  echo "commands include: "
  echo "  dump            Takes a specified source and dumps to console"
  echo "  node            Start a Flume node/agent (with watchdog)"
  echo "  master          Start a Flume Master server (with watchdog)"
  echo "  version         Dump flume build version information "
  echo "  node_nowatch    Start a flume node/agent (no watchdog)"
  echo "  master_nowatch  Start a Flume Master server (no watchdog)"
  echo "  class <class>   Run specified fully qualified class using Flume environment (no watchdog)"
  echo "                   ex: flume com.cloudera.flume.agent.FlumeNode "
  echo "  classpath       Dump the classpath used by the java executables"
  echo "  shell           Start the flume shell"
  echo "  killmaster      Kill a running master"
  exit -1
}

CMDPATH=`dirname $0`
# name of path
CMDPATH=`dirname $CMDPATH` 

FLUME=$CMDPATH/bin/flume

if [ FLUME_PID_DIR = "" ]
	then MASTERPID="/tmp/flumemaster.pid"
else
	MASTERPID=${FLUME_PID_DIR}/flumemaster.pid
fi

# NODEPID

CMD=$1

if [ "$CMD" == "" ] ; 
then
  usage
fi 

cygwin=false
case "`uname`" in
CYGWIN*) cygwin=true;;
esac

# name of script
BINPATH=`dirname $0`
# name of path
CMDPATH=`dirname $BINPATH` 

if [ -f "${BINPATH}/flume-env.sh" ]; then
  source $BINPATH/flume-env.sh
fi

export FLUME_HOME=${FLUME_HOME:-$CMDPATH}


JARPATH=$CMDPATH/lib
JARPATH2=$CMDPATH/libtest
JARS=`find $JARPATH/*.jar $JARPATH2/*.jar 2> /dev/null || true`

CPJARS=
JOPTS=" -Dflume.log.dir=${FLUME_LOG_DIR:-${FLUME_HOME}/logs} "
JOPTS+=" -Dflume.log.file=${FLUME_LOGFILE:-flume.log} "
JOPTS+=" -Dflume.root.logger=${FLUME_ROOT_LOGGER:-INFO,console} "
JOPTS+=" -Dzookeeper.root.logger=${ZOOKEEPER_ROOT_LOGGER:-ERROR,console} "
JOPTS+=" -Dwatchdog.root.logger=${WATCHDOG_ROOT_LOGGER:-INFO,console} "

if [ "$cygwin" == false ] ; then 
  # linux setup
  JOPTS+="-Djava.library.path=$CMDPATH/lib -Xmx2000m"    

  for i in $JARS ;
  do
    CPJARS=$i:$CPJARS
  done
  CPJARS=$CPJARS:$JAVA_HOME/lib/tools.jar
  if [ "$FLUME_DEVMODE" == true ] ; then 
    CPJARS=$CMDPATH/build_eclipse:$CPJARS

    # allow Jetty to compile servlets in dev mode
    BUILDJARS=`find $CMDPATH/libbuild/*.jar 2> /dev/null || true`
    for i in $BUILDJARS ;
    do
      CPJARS=$i:$CPJARS
    done
  fi

  
  export FLUME_CONF_DIR=${FLUME_CONF_DIR:-/etc/flume/conf/}
  CLASSPATH=${FLUME_CONF_DIR}

  if [ ! $FLUME_CLASSPATH == "" ] 
	then CLASSPATH+=:${FLUME_CLASSPATH}:
  fi

  if [ ! $HADOOP_HOME == "" ] 
	then CLASSPATH+=:${HADOOP_HOME}/hadoop-*-core.jar:${HADOOP_HOME}/lib/hadoop-*-core.jar
  elif [ -f /usr/lib/hadoop/hadoop-*core.jar ]
	export CDH_CLASSPATH=/usr/lib/hadoop
 	then CLASSPATH+=:${CDH_CLASSPATH}/*
  fi

  if [ "$ZOOKEEPER_HOME" = "" ]; then
    export ZOOKEEPER_HOME=/usr/lib/zookeeper
  fi


  export CLASSPATH+=:$CPJARS:${ZOOKEEPER_HOME}/*:$CMDPATH/build/*:${FLUME_HOME}/*
else 
  # windows with cygwin
  JOPTS+="-Djava.library.path=`cygpath -d $CMDPATH/lib`"
  for i in $JARS ;
  do
    CPJARS="`cygpath -d $i`;$CPJARS"
  done
  CPJARS="$CPJARS;$JAVA_HOME/lib/tools.jar"
  if [ "$FLUME_DEVMODE" == true ] ; then
    CPJARS="$CMDPATH/build_eclipse;$CPJARS"

    # allow Jetty to compile servlets in dev mode
    BUILDJARS=`find $CMDPATH/libbuild/*.jar 2> /dev/null || true`
    for i in $BUILDJARS ;
    do
      CPJARS="`cygpath -d $i`;$CPJARS"
    done
  fi

  export CLASSPATH="$CLASSPATH;$CPJARS;`cygpath -d $CMDPATH/build_eclipse`"
fi 

if [ -f "${HADOOP_CONF_DIR}/hadoop-env.sh" ]; then
  . "${HADOOP_CONF_DIR}/hadoop-env.sh"
fi


shift

# pass properties to allow java program to drop a pid file. java must
# now be exec'ed so the pid remains the same as the script.  In the
# mastercase, we actually only drop the pid of the watchdog.  The
# watchdog kills the watched child process if killed cleanly.
WATCHDOG_OPTS="-Dpid=$$ -Dpidfile="
WATCHDOG_CLASS=com.cloudera.flume.watchdog.FlumeWatchdog 
MASTER_WATCHDOG="java ${JOPTS} -Dpid=$$ -Dpidfile=/tmp/flumemaster.pid $WATCHDOG_CLASS"
MASTERI_WATCHDOG="java ${JOPTS} -Dpid=$$ -Dpidfile=/tmp/flumemaster.pid  $WATCHDOG_CLASS"
NODE_WATCHDOG="java ${JOPTS} -Dpid=$$ -Dpidfile=/tmp/flumenode-$$.pid $WATCHDOG_CLASS"

NODEI_WATCHDOG="java ${JOPTS} -Dfwdstdin=true -Dpid=$$ -Dpidfile=/tmp/flumenode-$$.pid $WATCHDOG_CLASS"

if [ "$CMD" = "-h" ] ; then 
  usage
elif [ "$CMD" = "node" ] ; then
  # there can be multiple nodes.
  exec $NODE_WATCHDOG java $JOPTS $UOPTS com.cloudera.flume.agent.FlumeNode "$@"
elif [ "$CMD" = "nodei" ] ; then
  # there can be multiple nodes.
  exec $NODEI_WATCHDOG java $JOPTS $UOPTS com.cloudera.flume.agent.FlumeNode "$@"


elif [ "$CMD" = "master" ] ; then
  # only allow one master
  if [ -f $MASTERPID ] ; then 
    PID=`cat $MASTERPID`
    echo "Master already running, pid=$PID"
    exit -1
  fi
  exec $MASTER_WATCHDOG java $JOPTS $UOPTS com.cloudera.flume.master.FlumeMaster "$@"
elif [ "$CMD" = "node_nowatch" ] ; then
  exec java $JOPTS $UOPTS com.cloudera.flume.agent.FlumeNode "$@"
elif [ "$CMD" = "master_nowatch" ] ; then
  exec java $JOPTS $UOPTS com.cloudera.flume.master.FlumeMaster "$@"
elif [ "$CMD" = "watchdog" ] ; then
  exec java $UOPTS $WATCHDOG_CLASS "$@"
elif [ "$CMD" = "version" ] ; then
  exec java $JOPTS $UOPTS com.cloudera.flume.VersionInfo
elif [ "$CMD" = "unit" ] ; then
  exec $FLUME junit.textui.TestRunner "$@"
elif [ "$CMD" = "unit4" ] ; then
  exec $FLUME org.junit.runner.JUnitCore "$@"
elif [ "$CMD" = "dump" ] ; then
  # this has no error checking.  be careful!
  exec java $JOPTS $UOPTS com.cloudera.flume.agent.FlumeNode \
      -1 -s -r -n dump -c "dump: $1 | console; "
elif [ "$CMD" = "shell" ] ; then
  exec java $JOPTS $UOPTS com.cloudera.flume.util.FlumeShell "$@"
elif [ "$CMD" = "killmaster" ] ; then
  if [ -f $MASTERPID ] ; then
    PID=`cat $MASTERPID`
    echo "Killing FlumeMaster (pid=$PID)" 
    if kill $PID ; then
      echo "FlumeMaster stopped"
    else 
     echo "FlumeMaster (pid=$PID) could not be stopped"
    fi
    rm -f $MASTERPID
  fi
elif [ "$CMD" = "class" ]; then
  # Just do a java class with the environment setup
  exec java $JOPTS $UOPTS "$@"
elif [ "$CMD" = "classpath" ];  then
  echo $CLASSPATH
else
  usage
fi
